# PHP CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-php/ for more details
#
version: 2
jobs:
  build:
    working_directory: ~/xlashie/api/
    docker:
      - image: circleci/php:7.4-node-browsers
    steps:
      - checkout:
          path: ~/xlashie

      - run: sudo apt update # PHP CircleCI 2.0 Configuration File# PHP CircleCI 2.0 Configuration File sudo apt install zlib1g-dev libsqlite3-dev
      - run: sudo docker-php-ext-install zip

      # Download and cache dependencies
      - restore_cache:
          keys:
            # "composer.lock" can be used if it is committed to the repo
            - v1-dependencies-{{ checksum "composer.json" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run: composer install -n --prefer-dist

      - save_cache:
          key: v1-dependencies-{{ checksum "composer.json" }}
          paths:
            - ./vendor
      - restore_cache:
          keys:
            - node-v1-{{ checksum "package.json" }}
            - node-v1-
      - run: npm install
      - save_cache:
          key: node-v1-{{ checksum "package.json" }}
          paths:
            - node_modules

  deploy-stg:
    working_directory: ~/xlashie/api/
    docker:
      - image: circleci/php:7.4-node-browsers
    environment:
      HOST_PORT: 7002
      FQDN: staging.xlashie.com
      DB_DATABASE: xlashie-staging
      G_CLIENT_ID_VAR_NAME: G_CLIENT_ID_STG
      G_CLIENT_SECRET_VAR_NAME: G_CLIENT_SECRET_STG
    steps: &deploy_steps
      - checkout:
          path: ~/xlashie
      - run:
          name: Build laravel env file
          command: |
            echo "export G_CLIENT_ID=${!G_CLIENT_ID_VAR_NAME}" >> $BASH_ENV
            echo "export G_CLIENT_SECRET=${!G_CLIENT_SECRET_VAR_NAME}" >> $BASH_ENV
            cd .. &&  ./build_env.sh
      - run: sudo apt update && sudo apt install rsync
      - run: sudo docker-php-ext-install zip
      - run: composer install -n --prefer-dist
      - run: npm install && npm run prod
      - run:
          name: symlink css framework
          command: |
            ln -s node_modules/\@creative-tim-official/argon-dashboard-free/assets/vendor/ ./public/asset/vendor
      - deploy:
          name: deploy
          command: |
            rsync -aLz --delete --exclude "composer.lock" --exclude ".git" --exclude "*.core" --exclude "%.swap" \
            --delete-excluded -e "ssh -o 'StrictHostKeyChecking no' -p $HOST_PORT" ./ rsync@$HOST_IP:api

  deploy-prod:
    working_directory: ~/xlashie/api/
    docker:
      - image: circleci/php:7.4-node-browsers
    environment:
      HOST_PORT: 7001
      FQDN: xlashie.com
      DB_DATABASE: xlashie
      G_CLIENT_ID_VAR_NAME: G_CLIENT_ID_PROD
      G_CLIENT_SECRET_VAR_NAME: G_CLIENT_SECRET_PROD
    steps: *deploy_steps

# Orchestrate our job run sequence
workflows:
  version: 2
  commit-pipline:
    jobs:
      - build

  deploy-pipline:
    jobs:
      - deploy-stg-approval:
          type: approval
          filters: &workflow_deploy_filters
            branches:
              ignore: /.*/
            tags:
              only: /^deploy-.*/

      - deploy-prod-approval:
          type: approval
          filters: *workflow_deploy_filters

      - deploy-stg:
          requires:
            - deploy-stg-approval
          filters: *workflow_deploy_filters

      - deploy-prod:
          requires:
            - deploy-stg
            - deploy-prod-approval
          filters: *workflow_deploy_filters
